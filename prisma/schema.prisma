// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  OWNER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  E_WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id                 String    @id @default(uuid())
  name               String    @db.VarChar(255)
  email              String    @unique @db.VarChar(100)
  password           String    @db.VarChar(100)
  phone              String    @unique @db.VarChar(20)
  role               UserRole  @default(CUSTOMER)
  address            String    @db.VarChar(255)
  avatar             String?   @db.VarChar(255)
  emailVerifiedAt    DateTime?
  resetPasswordToken String?   @db.VarChar(255)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  bookings      Booking[]
  facilities    Facility[]     @relation("OwnerFacilities")
  refreshTokens RefreshToken[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String   @db.Text
  icon        String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  facilities Facility[] @relation("CategoryFacilities")

  @@map("categories")
}

model Facility {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(255)
  thumbnail    String   @db.VarChar(255)
  categoryId   String
  description  String   @db.Text
  pricePerHour Decimal  @db.Decimal(10, 2)
  // available_slots Json             @db.Json
  ownerId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category Category  @relation("CategoryFacilities", fields: [categoryId], references: [id])
  benefits Benefit[]
  bookings Booking[]
  owner    User      @relation("OwnerFacilities", fields: [ownerId], references: [id])

  @@map("facilities")
}

model Benefit {
  id          String   @id @default(uuid())
  facilityId  String
  name        String   @db.VarChar(255)
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  facility Facility @relation(fields: [facilityId], references: [id])
}

model Booking {
  id          String        @id @default(uuid())
  userId      String
  facilityId  String
  bookingDate DateTime
  startTime   DateTime
  endTime     DateTime
  totalPrice  Decimal       @db.Decimal(10, 2)
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  facility Facility @relation(fields: [facilityId], references: [id])
  payment  Payment? @relation("BookingPayment")

  @@map("bookings")
}

model Payment {
  id            String        @id @default(uuid())
  bookingId     String        @unique
  paymentMethod PaymentMethod
  paymentAmount Decimal       @db.Decimal(10, 2)
  paymentDate   DateTime
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  booking Booking @relation("BookingPayment", fields: [bookingId], references: [id])

  @@map("payments")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @db.VarChar(1024)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("tokens")
}
